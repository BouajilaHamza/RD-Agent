[
    {
        "idea": "Memory Optimization",
        "method": "Reduce memory usage by downcasting numerical columns to smaller data types.",
        "context": "The notebook uses a function to reduce memory usage by converting integer and float columns to smaller data types in the datasets.",
        "hypothesis": {
            "problem": "Large datasets that can lead to memory allocation issues.",
            "data": "The datasets are large with many numerical columns.",
            "method": "The method involves downcasting numerical data types to reduce memory usage.",
            "reason": "This approach is beneficial when dealing with large datasets where memory constraints are an issue, allowing more data to fit into memory and speeding up processing."
        }
    },
    {
        "idea": "Feature Engineering with Rolling and Expanding Windows",
        "method": "Use rolling and expanding windows to calculate moving averages for sales data.",
        "context": "The notebook applies rolling windows with a size of 6 and expanding windows with a minimum of 2 observations to calculate mean sales.",
        "hypothesis": {
            "problem": "Time-series forecasting requiring the capture of temporal dependencies.",
            "data": "Sales data where trends and patterns over time are important.",
            "method": "Rolling and expanding windows provide smoothed versions of the data over specified periods.",
            "reason": "Useful in time-series data to capture local trends and long-term averages, which can improve model predictions by providing additional temporal context."
        }
    },
    {
        "idea": "Hyperparameter Tuning with Hyperopt",
        "method": "Use Hyperopt for automated hyperparameter tuning of LightGBM model.",
        "context": "The notebook employs Hyperopt with a defined search space to optimize hyperparameters for the LightGBM regressor.",
        "hypothesis": {
            "problem": "Need to optimize model performance by selecting the best hyperparameters.",
            "data": "A dataset suitable for tree-based models like LightGBM.",
            "method": "Hyperopt utilizes Bayesian optimization to efficiently search the hyperparameter space.",
            "reason": "Increases model performance by systematically searching for optimal parameters, which is especially useful when manual tuning is impractical due to the size of the search space."
        }
    },
    {
        "idea": "Categorical Encoding",
        "method": "Convert categorical variables into numerical codes using pandas' categorical dtype.",
        "context": "The notebook encodes categorical features into numerical values for model compatibility.",
        "hypothesis": {
            "problem": "Machine learning models require numerical input data.",
            "data": "Presence of categorical features that need encoding.",
            "method": "Converting categories to numerical codes makes them usable for models that don't support categorical inputs.",
            "reason": "Essential step in preprocessing categorical data for compatibility with most machine learning algorithms, thereby improving learning capabilities."
        }
    },
    {
        "idea": "Feature Engineering with Lagging",
        "method": "Introduce lag features for sales data using specific lag intervals.",
        "context": "The notebook creates lag features at intervals of powers of two (1, 2, 4, 8, 16, 32) for sales data.",
        "hypothesis": {
            "problem": "Capturing past dependencies in time-series data for forecasting.",
            "data": "Sales time series where past sales influence future sales.",
            "method": "Lag features capture temporal dependencies by referencing past values at specific intervals.",
            "reason": "Effective in time-series forecasting by allowing the model to learn from historical patterns and trends."
        }
    },
    {
        "idea": "Data Reshaping using Melt",
        "method": "Reshape the sales training dataset from wide format to long format using pandas melt function for easier merging with other datasets.",
        "context": "The notebook reshapes the sales data to align its structure with the calendar dataset for merging purposes.",
        "hypothesis": {
            "problem": "Need to merge datasets with different structures for comprehensive feature engineering.",
            "data": "Datasets with different formats leading to difficulties in merging.",
            "method": "'melt' function unpivots DataFrame from wide to long format, aligning structural differences.",
            "reason": "Facilitates dataset merging by aligning formats, crucial in multi-dataset feature engineering scenarios."
        }
    }
]