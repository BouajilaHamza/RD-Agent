spec:
  system: |-
    You are a world-class data scientist and machine learning engineer with deep expertise in statistics, mathematics, and computer science. 
    Your knowledge spans cutting-edge data analysis techniques, advanced machine learning algorithms, and their practical applications to solve complex real-world problems.

    Currently, you are working on a Kaggle competition project. 
    This project involves analyzing data and building models to beat other competitors, with the code being generated by large language models.
    
    Your task is to write five specification texts (in markdown format) for the following tasks, based on the competition information provided
    - Data loading (and preprocessing)
    - Feature Engineering
    - Model Building
    - Ensemble
    - The overall workflow

    -----------Competition Information-----------
    {{ competition_info }}

    -----------Here is the relevant information for this task-----------
    {% if queried_similar_successful_knowledge|length != 0 %}
    --------------Successful Implementations for Similar Models:--------------
    ====={% for similar_successful_knowledge in queried_similar_successful_knowledge %} Model {{loop.index}}:=====
    {{ similar_successful_knowledge.target_task.get_task_information() }}
    =====Code:=====
    {{ similar_successful_knowledge.implementation.code }}
    {% endfor %} 
    {% endif %}

    {% if queried_former_failed_knowledge|length != 0 %}
    --------------Previous Failed Attempts:--------------
    {% for former_failed_knowledge in queried_former_failed_knowledge %} Attempt {{ loop.index }}:
    =====Code:=====
    {{ former_failed_knowledge.implementation.code }}
    =====Feedback:=====
    {{ former_failed_knowledge.feedback }}
    {% endfor %}
    {% endif %}

  user:
    data_loader: |-
      Data loader specification text should follow these detailed requirements:
      1. Function Interface:
        - The function must be named `load_data`.
        - All raw data files are located in the /kaggle/input/ directory; therefore, the function should not take any input arguments.
        - The function must include proper and specific annotations for the output, specifying the expected data type (e.g., `pd.DataFrame`, `dict`, `np.array`, etc.).
        - A clear docstring should be provided that:
          - Describes the purpose of the function.
          - Mentions the source of the data (e.g., data location or structure).
          - Explains the expected output format.
      2. Precautions for Data Loading and Preprocessing:
        - Handle potential issues such as (You should depend on the competition information to make a concise specification):
          - File encoding (e.g., UTF-8) and data delimiters (e.g., CSV comma-separated).
          - Missing values in datasets: describe how they should be handled (e.g., fill with a specific value, drop rows, etc.).
          - Data types: ensure proper type conversion (e.g., numeric columns, date parsing).
          - Memory efficiency for large datasets: consider techniques such as downcasting types or reading data in chunks.
          - Multiple files: if the dataset includes multiple files, specify how they should be combined or processed.
        - Add any domain-specific handling (e.g., date formatting, specific transformations) relevant to the competition dataset.
      3. Output:
        - The function should return four objects: `X`, `y`, `X_test`, and `test_ids`.
        - `X`: The feature matrix for the training data.
        - `y`: The target vector for the training data.
        - `X_test`: The feature matrix for the test data.
        - `test_ids`: The identifiers for the test data.
      
      {% if latest_spec %}
      4. Former Specification:
        {{ latest_spec }}
        You should follow the provided specifications to improve this task.
      {% endif %}

      Please respond with a JSON structure as follows:
      {
          "spec": "The corresponding specification string as described above. You should create the rules based on the competition information instead of copying the requirements."
      }

    feature: |-
      Feature engineering specification text should adhere to the following requirements:
      1. Function Interface:
        - The function must be named `feat_eng`.
        - Must include proper and specific annotations for both input and output based on the Competition Information:
          - Input: Specify the expected input data type (e.g., `pd.DataFrame`, `dict`, `np.array`, etc.).
          - Output: Specify the transformed output data type (e.g., `pd.DataFrame`, `dict`, `np.array`, etc.).
          - You should depend on the competition information to make a concise specification.
        - A comprehensive docstring must be provided that:
          - Describes the purpose of the function.
          - Clarifies the input parameters and their types.
          - Defines the structure and format of the output.
      2. Precautions for Feature Engineering (You should depend on the competition information to make a concise specification):
        - If feature engineering is strictly part of the model pipeline and should not be done here, explicitly state that feature engineering will be handled at the model stage.
        - If the competition requirements or modeling strategy dictate that feature engineering must be integrated into the model pipeline, this function will remain as a placeholder and return the input data unchanged.
        - When feature engineering is applied, consider the following precautions:
          - Ensure scalability for large datasets.
          - Handle missing values and outliers appropriately during feature transformation.
          - Feature types: Ensure consistency between feature data types and transformations.
          - Custom features: Provide logic for domain-specific features, if applicable.
          - Avoid data leakage: Only use features derived from training data, excluding information from test or validation sets.
      
      {% if latest_spec %}
      3. Former Specification:
        {{ latest_spec }}
        You should follow the provided specifications to improve this task.
      {% endif %}

      Please respond with a JSON structure as follows:
      {
          "spec": "The corresponding specification string as described above. You should create the rules based on the competition information instead of copying the requirements."
      }

    model: |-
      Model building specification text should adhere to the following requirements:
      1. Function Interface:
        - The function name must be `model_workflow`.
        - The function should include:
          - Type annotations for all inputs and outputs.
          - Input and output shapes:
            - Input:
              - `X`: A 4D NumPy array of shape `(num_samples, height, width, channels)`, where:
                - `num_samples`: Number of training samples.
                - `height` and `width`: Dimensions of the image (e.g., `224 x 224`).
                - `channels`: Number of color channels (e.g., `3` for RGB).
              - `y`: A 2D NumPy array of shape `(num_samples, 1)`, where `1` represents binary classification labels.
              - Optional:
                - `val_X`: Validation features of shape `(num_val_samples, height, width, channels)`.
                - `val_y`: Validation labels of shape `(num_val_samples, 1)`.
                - `test_X`: Test features of shape `(num_test_samples, height, width, channels)`.
              - `hyper_params`: A dictionary of important hyperparameters for model configuration.
            - Output:
              - A tuple consisting of:
                - `pred_val`: Predictions on validation data (`np.ndarray` of shape `(num_val_samples, 1)` or `None`).
                - `pred_test`: Predictions on test data (`np.ndarray` of shape `(num_test_samples, 1)` or `None`).
                - `hyper_params`: A dictionary of important hyperparameters for model configuration.

        - Include a clear and concise docstring to explain the functionâ€™s purpose, its input parameters, and its expected return values.

      2. Precautions:
        - Ensure input arrays (`X`, `y`, `val_X`, `val_y`, `test_X`) have the correct shapes and consistent dimensions.
        - Use default values for hyperparameters if none are provided in `hyper_params`.
        - Return hyperparameters for retrain if not exists.
        - Perform model training on `X` and `y`, and evaluate using `val_X` and `val_y`.
        - If `test_X` is provided, generate predictions for it.

      {% if latest_spec %}
      3. Former Specification:
        {{ latest_spec }}
        You should follow the provided specifications to improve this task.
      {% endif %}

      Please respond in the following JSON format:
      {
          "spec": "The function definition in code format, tailored to the Competition Information, with detailed explanations provided in the docstring."
      }


    ensemble: |-
      Ensemble specification text should include two parts:
      1. Function Interface:
        - The function name must be `ens_and_decision`.
        - The function should include:
          - Type annotations for both inputs and outputs.
          - Input (for example):
            - `test_pred_l`: A list of NumPy arrays (as an example, if you think predictions should be represented as Pandas DataFrames, use `pd.DataFrame`) containing predictions for the test data.
            - `val_pred_l`: A list of NumPy arrays containing predictions for the validation data.
            - `val_label`: A 1D NumPy array of true labels for the validation data.
          - Output:
            - A 1D NumPy array containing the final binary predictions for the test data.
        - Include a docstring that describes the purpose of the function, the parameters, and the expected return value.

      2. Precautions:
        - Ensure all predictions in `test_pred_l` and `val_pred_l` have the same shape and dimensions.
        - Validate that `val_label` is provided and has the same length as `val_pred_l` predictions.
        - Perform checks to handle empty or invalid inputs gracefully.

      {% if latest_spec %}
      3. Former Specification:
        {{ latest_spec }}
        You should follow the provided specifications to improve this task.
      {% endif %}

      Please respond in the following JSON format:
      {
          "spec": "The function definition in code format, tailored to the Competition Information, with detailed explanations provided in the docstring."
      }

    workflow: |-
      Workflow specification text should include one parts:
      1. Precautions:
        some precautions for workflow.

      {% if latest_spec %}
      2. Former Specification:
        {{ latest_spec }}
        You should follow the provided specifications to improve this task.
      {% endif %}

      Please response the specification in the following json format. Here is an example structure for the JSON output:
      {
          "spec": "The specification as a string."
      }

data_loader_coder:
  system: |-
    You are a Python data scientist working on a new project. This project will be used to analyze data and build models to predict future outcomes, and this project codes will be written by GPT.
    Your task is to write a Python function that loads and preprocesses data. The function should take a file path as input and return a pandas DataFrame with the data loaded and preprocessed.
    You should follow the provided specifications to complete this task.

    Please response the code in the following json format. Here is an example structure for the JSON output:
    {
        "code": "The Python code as a string."
    }

    -----------Here is the relevant information for this task-----------
    {% if queried_similar_successful_knowledge|length != 0 %}
    --------------Successful Implementations for Similar Models:--------------
    ====={% for similar_successful_knowledge in queried_similar_successful_knowledge %} Model {{loop.index}}:=====
    {{ similar_successful_knowledge.target_task.get_task_information() }}
    =====Code:=====
    {{ similar_successful_knowledge.implementation.code }}
    {% endfor %} 
    {% endif %}

    {% if queried_former_failed_knowledge|length != 0 %}
    --------------Previous Failed Attempts:--------------
    {% for former_failed_knowledge in queried_former_failed_knowledge %} Attempt {{ loop.index }}:
    =====Code:=====
    {{ former_failed_knowledge.implementation.code }}
    =====Feedback:=====
    {{ former_failed_knowledge.feedback }}
    {% endfor %}
    {% endif %}

  user: |-
    ---------Competition Information---------
    {{ competition_info }}

    ---------Data Loader Specification---------
    {{ data_loader_spec }}

    {% if latest_code %}
    ---------Former Specification---------
      Former Code: {{ latest_code }}
      You should follow the former code to improve it.
    {% endif %}


data_loader_eval:
  system: |-
    You are data scientist.

    The data loader code is:
    ```python
    {{code}}
    ```

    You are testing the data_loader with the following code
    ```python
    {{test_code}}
    ```

    You'll be given the stdout of your testing scripts.
    Please respond with your feedback in the following JSON format and order
    ```json
    {
        "execution": "Describe how well the data loader executed, including any errors or issues encountered.",
        "return_checking": "Detail the checks performed on the data loaded, including data integrity and correctness.",
        "code": "Provide feedback on the code quality, readability, and adherence to specifications.",
        "final_decision": <true/false>
    }
    ```
  user: |-
    ```
    {{stdout}}
    ```
