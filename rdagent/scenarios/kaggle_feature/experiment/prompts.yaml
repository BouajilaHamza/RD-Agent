kg_description_template:
  system: |-
    You are an assistant that extracts structured information from unstructured text.

  user: |-
    Based on the following competition description, please extract the following details:
    1. Competition Type (choose from the following: Prediction, Classification, Time-Series Forecasting, Regression, Clustering)
    2. Competition Description
    3. Target Description
    4. Competition Features (please ensure the features are meaningful attributes, such as numerical, categorical variables, rather than simple identifiers like IDs)

    Competition Description: {{ competition_descriptions }}


kg_feature_background: |-
  You are tasked with solving a data science problem in the context of {{ competition_type }}: 
  {{competition_description}}
  
  We have provided an overall pipeline in the `train.py` script. 
  Your task is to complete this script by performing feature engineering to optimize performance for this competition.
  
  The model (which you do not need to implement) is a machine learning or deep learning framework designed to predict {{ target_description }}. 
  The data comes from the competition dataset, focusing on key attributes such as {{ competition_features }}.

  Your primary objective is to perform feature engineering, a critical step in improving data quality and ensuring the accuracy of model predictions. 
  This process includes transforming raw data into a suitable format for analysis or modeling, and may involve techniques such as normalization, standardization, or the creation of new features. 
  Effective feature engineering can significantly enhance both data quality and model performance.

  Feature engineering typically involves several key activities, including but not limited to: data cleaning, feature creation, data integration, data transformation, data reduction, and feature scaling (e.g., normalization or standardization).
  
  The feature engineering method should be defined with the following components:
  1. **Name**: A unique identifier for the feature engineering method.
  2. **Description**: A concise description of the method.
  3. **Code**: The implementation code for the feature engineering method.
  4. **Variables**: The specific steps or functions used in this feature engineering method.

kg_feature_interface: |-
  Your Python code should adhere to the specified interface to ensure seamless interaction with the user's system.
  
  The code structure must be divided into three main sections:
  1. **Import Section**: Import all necessary libraries.
  2. **Function Section**: Define all functions, including the main feature engineering function `feat_eng`.
  3. **Main Section**: Define the execution logic where `feat_eng` is invoked.

  The main function `feat_eng` should be defined and called within the `if __name__ == "__main__"` block. 
  The test will run the code directly with the command:  `python factor.py <path_to_train_csv>`.
  ```python
  if __name__ == "__main__":
    # Check if the CSV file path is provided as an argument
    if len(sys.argv) != 2:
        print("Usage: python factor.py <path_to_train_csv>")
        sys.exit(1)
    
    # Load the CSV file
    csv_file_path = sys.argv[1]
    X_train = pd.read_csv(csv_file_path)
    
    # Apply the feat_eng function
    X_train = feat_eng(X_train)
    
    # Print the resulting DataFrame to check the output
    print(X_train)
  ```

  The input to `feat_eng` will be a pandas DataFrame, which should be processed to return a new DataFrame containing the engineered features. This output should closely resemble the structure of the original data but with the newly engineered features.

  Exception handling will be managed externally, so avoid using try-except blocks in your code. The user will handle any exceptions that arise and provide feedback as needed.

  The expected usage is as follows:
  ```python
  m = __import__(f.name.strip(".py"))
  X_train = m.feat_eng(X_train)
  ```
  
  Your task is to process this DataFrame, perform the necessary feature engineering, and return a new DataFrame containing the engineered features.

  Do not include any try-except blocks in your code. The user will handle exception messages and provide feedback accordingly.

  Ensure that your code meets these requirements and produces a feature-engineered DataFrame that aligns with the user's data and objectives.

kg_feature_output_format: |-
  The output format should be tailored to the specific task at hand. Depending on the requirements:
  - The output can be a single feature table or a composite table consisting of multiple processed features.
  - If it is a composite table, it can include transformations such as normalization
  - The choice of output format should be based on the specific task's objectives and the nature of the data.
  
kg_feature_simulator: |-
  The data preprocessing method you provide will be used to prepare data by processing it, concatenating the results with other features, and removing unnecessary features before training the model. 
  The processed data will then be used for model training and prediction.
  
  User will use your data preprocessing method to do the following steps:
   1. Execute your Python files to process the data. (what you need to do)
  2. Concatenate the processed features with other features and the original data.
  3. Remove any unnecessary features before training the model.
  4. Train a model such as LightGBM, CatBoost, LSTM, or a simple PyTorch model using the processed data.
  5. Evaluate the performance of your preprocessing method and provide feedback.

kg_feature_rich_style_description : |-
  xxx
kg_feature_experiment_setting: |-
  xxx