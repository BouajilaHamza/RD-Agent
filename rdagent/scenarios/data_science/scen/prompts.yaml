scen_desc: |-
  ------Background of the scenario------
  {{scen.background}}

  ------The expected output & submission format specifications------
  {{scen.submission_specifications}}

description_template:
  system: |-
    You are an assistant that extracts structured information from unstructured text.
    The user will provide you a Kaggle competition description, and you need to extract specific details from it.
    For the dataset, the competition may not include detailed information about the dataset. The user has read the dataset and provide you the relevant information. Please include it in your response.
    Please answer in Json format with the following schema:
    {
      "Competition Type": "The type of competition, e.g., 'Classification', 'Regression', 'Clustering', 'Prediction", "Time-Series Forecasting",
      "Competition Description": "A brief description of the competition",
      "Target Description": "A description of the target variable to be predicted",
      "Competition Features": "Two-line description of the overall features involved within the competition as background."
      "Submission Specifications": "The submission specification & sample submission csv descriptions for the model to output."
      "Submission channel number to each sample": "The number of channels in the output for each sample, e.g., 1 for regression, N for N class classification with probabilities, etc. A Integer. If not specified, it is 1."
      "Evaluation Description": "A brief description of the metrics used in the evaluation. Please note that if `evaluation_metric_direction` is True, it indicates that higher values are better; if False, lower values are preferred."
    }
    Since these might be very similar column names in data like one_hot_encoded columns, you can use some regex to group them together.
  user: |-
    Competition Description: 
    {{ competition_descriptions }}
    Evaluation_metric_direction: 
    {{ evaluation_metric_direction }}

competition_background: |-
  You are solving a data science tasks and the type of the competition is {{ competition_type }}.
  The competition description is: {{competition_description}}. 
  
  We provide an overall script in file: train.py. The user will run the train.py script along with several feature and model scripts to train several model to get a good performance on this task.

  The train.py script is as follows:
  ```python
  {{ train_script }}
  ```
  
  The final output of our pipeline is from a ensemble of up to four models. Each model is trained on a different subset of the data.
  The four model types are: XGBoost, RandomForest, LightGBM and Neural Network (A Pytorch model).
  About the Neural Network model, You can try different architectures and hyperparameters to improve the performance. You can even use a pytorch model to ensemble the other three types of models. Try to open your mind on the NN model.
  
  The data is extracted from the competition dataset, focusing on relevant attributes in {{ competition_features }}.

  The user firstly designs and implements a feature book for each model. The feature book is a combination of several features and feature groups.
  The feature book is built from:
  - Raw features: The raw features are the original features from the dataset.
  - generated features: The generated features are the features that are calculated based on the raw features according to some formulations. The calculation should be align with some physical or logical meaning. Don't just simply apply some numeric operations to the raw features.
  - feature groups: The feature groups are preprocessed group of features from the raw features like normalization, one hot encoding, etc.
  The feature or feature group is defined in the following parts:
  - Name: The name of the feature or feature group.
  - Description: A description of the feature or feature group.
  - Formulation: The formulation of the feature or feature group.
  - Variables: The variable list used in the formulation. Notice: The variable should be a specific feature in the dataset. Please make sure the feature name is exactly the same as the feature name in the dataset.
  
  For each model, the user will design and implement the model in a separate script.
  The model is defined in the following parts:
  - Name: The name of the model.
  - Description: A description of the model.
  - Architecture: The detailed architecture of the model, such as neural network layers or tree structures.
  - ModelType: The type of the model, which should be one of ["XGBoost", "RandomForest", "LightGBM", "NN"].
  The model should provide clear and detailed documentation of its architecture and hyperparameters.

  The user tries to optimize the performance iteratively by employing one of the feature related or model related action items:
  - Feature related:
    - "Feature engineering": The user will design several new tasks and implement several new features. The new feature might only affect the model using all the feature book.
    - "Feature processing": The user will design a new task to process the feature book like normalization or one hot encoding to improve the model performance. Any processing with help of a deep model is not included in this task.
  - Model related:
    - "Model feature selection": The user will modify one model to select the part of the features from the feature book to improve the model performance.
    - "Model tuning": The user will tune the hyperparameters of XGBoost, RandomForest or LightGBM or build or improve the NN model to improve the model performance. 
  Notice: You can automatically optimize the hyperparameters of the model using some library when training the model. Since we don't have a lot of time to train the model, please use a small number of trials to optimize the hyperparameters. 
  Our validation set split is not deterministic, so when you are using hyperparameter tuning, you can merge training and validation and use cross validation method to tune the hyperparameters.
  One you have determine the best model parameter, you should retrain the model on all training and validation set to get the final model.

  For each loop, you need to help user decide which action item to choose and provide the corresponding code to implement the action item.